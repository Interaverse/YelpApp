// Import necessary modules\nconst functions = require(\"firebase-functions\");\nconst {BigQuery} = require(\"@google-cloud/bigquery\");\nconst cors = require(\"cors\")({origin: true});\n\n// Initialize BigQuery client\n// IMPORTANT: Ensure 'yelp-456821-939594800d2e.json' is in the 'functions' directory\n// and added to .gitignore\nconst bigqueryClient = new BigQuery({\n  projectId: \"yelp-456821\",\n  keyFilename: \"yelp-456821-939594800d2e.json\",\n});\n\n// Cloud Function to get investor/analyst dashboard data\nexports.getInvestorDashboardData = functions.https.onRequest((req, res) => {\n  // Enable CORS\n  cors(req, res, async () => {\n    try {\n      // --- Define BigQuery Queries ---\n      // Note: Adjust table names (e.g., `investor_business_dataset.Fact_Business_Performance`)\n      // if the dataset ID is part of the table name in BigQuery.\n      // These queries are examples based on the schema; refine as needed.\n\n      const datasetId = \"investor_business_dataset\"; // Dataset ID\n\n      // Query 1: Overall KPIs (Updated Metrics)\n      const kpiQuery = `\n        SELECT\n          COUNT(DISTINCT T1.business_id) AS total_businesses,\n          SUM(T1.review_count) AS total_reviews,\n          SUM(T1.checkin_count) AS total_checkins,\n          SUM(T1.tip_count) AS total_tips,\n          SUM(T1.photo_count) AS total_photos,\n          AVG(T1.engagement_score) AS avg_engagement_score,\n          AVG(T1.growth_rate) AS avg_growth_rate\n        FROM \`${datasetId}.Fact_Business_Performance\` AS T1\n        WHERE T1.engagement_score IS NOT NULL AND T1.growth_rate IS NOT NULL;\n      `;\n\n      // Query 2: Performance Trend (by month_id, Updated Metrics)\n      const trendQuery = `\n        SELECT\n          T1.month_id, -- Use month_id directly\n          SUM(T1.review_count) AS monthly_total_reviews,\n          SUM(T1.checkin_count) AS monthly_total_checkins,\n          SUM(T1.tip_count) AS monthly_total_tips,\n          SUM(T1.photo_count) AS monthly_total_photos,\n          AVG(T1.engagement_score) AS monthly_avg_engagement_score,\n          AVG(T1.growth_rate) AS monthly_avg_growth_rate\n        FROM \`${datasetId}.Fact_Business_Performance\` AS T1\n        WHERE T1.engagement_score IS NOT NULL AND T1.growth_rate IS NOT NULL\n        GROUP BY T1.month_id\n        ORDER BY T1.month_id; -- Assuming month_id is sortable (e.g., 'YYYY-MM')\n      `;\n\n      // Query 3: Performance by Top 10 Categories (Updated Metrics & Field Name)\n      const categoryQuery = `\n        SELECT\n          T3.subcategory, -- Correct field name\n          SUM(T1.review_count) AS category_total_reviews,\n          SUM(T1.checkin_count) AS category_total_checkins,\n          SUM(T1.tip_count) AS category_total_tips,\n          SUM(T1.photo_count) AS category_total_photos,\n          AVG(T1.engagement_score) AS category_avg_engagement_score,\n          AVG(T1.growth_rate) AS category_avg_growth_rate\n        FROM \`${datasetId}.Fact_Business_Performance\` AS T1\n        JOIN \`${datasetId}.Dim_Business\` AS T3 ON T1.business_id = T3.business_id\n        WHERE T1.engagement_score IS NOT NULL AND T1.growth_rate IS NOT NULL AND T3.subcategory IS NOT NULL\n        GROUP BY T3.subcategory -- Correct field name\n        ORDER BY category_total_reviews DESC\n        LIMIT 10;\n      `;\n\n      // --- Execute Queries ---\n      const [kpiJob] = await bigqueryClient.createQueryJob({query: kpiQuery});\n      const [trendJob] = await bigqueryClient.createQueryJob({query: trendQuery});\n      const [categoryJob] = await bigqueryClient.createQueryJob({query: categoryQuery});\n\n      const [kpiResults] = await kpiJob.getQueryResults();\n      const [trendResults] = await trendJob.getQueryResults();\n      const [categoryResults] = await categoryJob.getQueryResults();\n\n      // --- Format and Send Response ---\n      res.status(200).json({\n        kpis: kpiResults[0] || {},\n        trends: trendResults,\n        byCategory: categoryResults,\n      });\n    } catch (error) {\n      console.error(\"Error fetching BigQuery data:\", error);\n      // Log the detailed error for debugging\n      functions.logger.error(\"BigQuery Error:\", {\n          message: error.message,\n          stack: error.stack,\n          errors: error.errors // BigQuery specific errors\n      });\n      // Send a generic error response to the client\n      res.status(500).send(\"Internal Server Error fetching dashboard data.\");\n    }\n  });\n}); 